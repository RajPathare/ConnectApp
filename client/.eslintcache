[{"/home/raj/Desktop/ConnectApp/client/src/index.js":"1","/home/raj/Desktop/ConnectApp/client/src/App.js":"2","/home/raj/Desktop/ConnectApp/client/src/components/layout/Navbar.js":"3","/home/raj/Desktop/ConnectApp/client/src/components/layout/Landing.js":"4","/home/raj/Desktop/ConnectApp/client/src/components/auth/Login.js":"5","/home/raj/Desktop/ConnectApp/client/src/components/auth/Register.js":"6","/home/raj/Desktop/ConnectApp/client/src/store.js":"7","/home/raj/Desktop/ConnectApp/client/src/reducers/index.js":"8","/home/raj/Desktop/ConnectApp/client/src/reducers/alertReducer.js":"9","/home/raj/Desktop/ConnectApp/client/src/actions/types.js":"10","/home/raj/Desktop/ConnectApp/client/src/actions/alert.js":"11","/home/raj/Desktop/ConnectApp/client/src/components/layout/Alert.js":"12","/home/raj/Desktop/ConnectApp/client/src/actions/auth.js":"13","/home/raj/Desktop/ConnectApp/client/src/reducers/auth.js":"14","/home/raj/Desktop/ConnectApp/client/src/utils/setAuthToken.js":"15","/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Dashboard.js":"16","/home/raj/Desktop/ConnectApp/client/src/components/routing/PrivateRoute.js":"17","/home/raj/Desktop/ConnectApp/client/src/reducers/profile.js":"18","/home/raj/Desktop/ConnectApp/client/src/actions/profile.js":"19","/home/raj/Desktop/ConnectApp/client/src/components/layout/Spinner.js":"20","/home/raj/Desktop/ConnectApp/client/src/components/profile-form/CreateProfile.js":"21","/home/raj/Desktop/ConnectApp/client/src/components/dashboard/DashboardActions.js":"22","/home/raj/Desktop/ConnectApp/client/src/components/profile-form/EditProfile.js":"23","/home/raj/Desktop/ConnectApp/client/src/components/profile-form/AddExperience.js":"24","/home/raj/Desktop/ConnectApp/client/src/components/profile-form/AddEducation.js":"25","/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Experience.js":"26","/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Education.js":"27","/home/raj/Desktop/ConnectApp/client/src/components/profiles/Profiles.js":"28","/home/raj/Desktop/ConnectApp/client/src/components/profiles/ProfileItem.js":"29","/home/raj/Desktop/ConnectApp/client/src/components/profile/Profile.js":"30","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileTop.js":"31","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileAbout.js":"32","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileExperience.js":"33","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileEducation.js":"34","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileGitHub.js":"35","/home/raj/Desktop/ConnectApp/client/src/reducers/post.js":"36","/home/raj/Desktop/ConnectApp/client/src/components/posts/Posts.js":"37","/home/raj/Desktop/ConnectApp/client/src/actions/post.js":"38","/home/raj/Desktop/ConnectApp/client/src/components/posts/PostItem.js":"39"},{"size":272,"mtime":1610378048940,"results":"40","hashOfConfig":"41"},{"size":2525,"mtime":1612774842968,"results":"42","hashOfConfig":"41"},{"size":1706,"mtime":1612774877145,"results":"43","hashOfConfig":"41"},{"size":1157,"mtime":1612163669174,"results":"44","hashOfConfig":"41"},{"size":2026,"mtime":1610448136993,"results":"45","hashOfConfig":"41"},{"size":2928,"mtime":1610448304766,"results":"46","hashOfConfig":"41"},{"size":375,"mtime":1610377900481,"results":"47","hashOfConfig":"41"},{"size":287,"mtime":1612773483776,"results":"48","hashOfConfig":"41"},{"size":382,"mtime":1610378669666,"results":"49","hashOfConfig":"41"},{"size":776,"mtime":1612773596645,"results":"50","hashOfConfig":"41"},{"size":458,"mtime":1610384267848,"results":"51","hashOfConfig":"41"},{"size":646,"mtime":1610384048645,"results":"52","hashOfConfig":"41"},{"size":2771,"mtime":1612165396371,"results":"53","hashOfConfig":"41"},{"size":1668,"mtime":1612257219886,"results":"54","hashOfConfig":"41"},{"size":258,"mtime":1610445615924,"results":"55","hashOfConfig":"41"},{"size":1952,"mtime":1612343423408,"results":"56","hashOfConfig":"41"},{"size":575,"mtime":1610470370924,"results":"57","hashOfConfig":"41"},{"size":1129,"mtime":1612353164113,"results":"58","hashOfConfig":"41"},{"size":7033,"mtime":1612768580367,"results":"59","hashOfConfig":"41"},{"size":294,"mtime":1612340645438,"results":"60","hashOfConfig":"41"},{"size":6943,"mtime":1612174852449,"results":"61","hashOfConfig":"41"},{"size":611,"mtime":1612175279338,"results":"62","hashOfConfig":"41"},{"size":8220,"mtime":1612348769991,"results":"63","hashOfConfig":"41"},{"size":3454,"mtime":1612343303230,"results":"64","hashOfConfig":"41"},{"size":3415,"mtime":1612343293706,"results":"65","hashOfConfig":"41"},{"size":1612,"mtime":1612257350809,"results":"66","hashOfConfig":"41"},{"size":1599,"mtime":1612257476057,"results":"67","hashOfConfig":"41"},{"size":1283,"mtime":1612731122759,"results":"68","hashOfConfig":"41"},{"size":1306,"mtime":1612343365321,"results":"69","hashOfConfig":"41"},{"size":2917,"mtime":1612351681893,"results":"70","hashOfConfig":"41"},{"size":1992,"mtime":1612347814623,"results":"71","hashOfConfig":"41"},{"size":877,"mtime":1612350485482,"results":"72","hashOfConfig":"41"},{"size":763,"mtime":1612349546419,"results":"73","hashOfConfig":"41"},{"size":769,"mtime":1612350590133,"results":"74","hashOfConfig":"41"},{"size":1944,"mtime":1612352790869,"results":"75","hashOfConfig":"41"},{"size":467,"mtime":1612773734438,"results":"76","hashOfConfig":"41"},{"size":1135,"mtime":1612775262007,"results":"77","hashOfConfig":"41"},{"size":491,"mtime":1612774477348,"results":"78","hashOfConfig":"41"},{"size":1990,"mtime":1612777339727,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"v56vz8",{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/raj/Desktop/ConnectApp/client/src/index.js",[],["168","169"],"/home/raj/Desktop/ConnectApp/client/src/App.js",["170"],"/home/raj/Desktop/ConnectApp/client/src/components/layout/Navbar.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/layout/Landing.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/auth/Login.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/auth/Register.js",[],"/home/raj/Desktop/ConnectApp/client/src/store.js",[],"/home/raj/Desktop/ConnectApp/client/src/reducers/index.js",[],"/home/raj/Desktop/ConnectApp/client/src/reducers/alertReducer.js",["171"],"import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch(action.type){\n        case SET_ALERT:\n            return [...state, action.payload];\n        case REMOVE_ALERT:\n            return state.filter(alert => alert.id !== action.payload);\n        default:\n            return state;\n    }\n}","/home/raj/Desktop/ConnectApp/client/src/actions/types.js",[],"/home/raj/Desktop/ConnectApp/client/src/actions/alert.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/layout/Alert.js",[],"/home/raj/Desktop/ConnectApp/client/src/actions/auth.js",[],"/home/raj/Desktop/ConnectApp/client/src/reducers/auth.js",["172"],"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, ACCOUNT_DELETED } from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    user: null\n};\n\nexport default (state = initialState, action) => {\n    switch(action.type){\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {...state, ...action.payload, isAuthenticated: true, loading: false};\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {...state, token: null, isAuthenticated: false, loading: false};\n        case USER_LOADED:\n            return {...state, isAuthenticated: true, loading: false, user: action.payload}\n        case AUTH_ERROR: \n            localStorage.removeItem('token');\n            return {...state, token: null, isAuthenticated: false, loading: false};\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {...state, ...action.payload, isAuthenticated: true, loading: false};\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {...state, token: null, isAuthenticated: false, loading: false};\n        case LOGOUT:\n            localStorage.removeItem('token');\n            return {...state, token: null, isAuthenticated: false, loading: false};\n        case ACCOUNT_DELETED:\n            localStorage.removeItem('token');\n            return {...state, token: null, isAuthenticated: false, loading: false};\n        default:\n            return state;\n    }\n}\n\n","/home/raj/Desktop/ConnectApp/client/src/utils/setAuthToken.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Dashboard.js",["173"],"import React, { useEffect, Fragment } from 'react';\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrentProfile, deleteAccount } from '../../actions/profile';\n\nimport Spinner from '../layout/Spinner';\n\nimport DashboardActions from './DashboardActions';\n\nimport Experience from './Experience';\nimport Education from './Education';\n\nconst Dashboard = (props) => {\n\n    useEffect(()=> {\n        props.getCurrentProfile();\n    },[]);\n\n    return props.profile.loading && props.profile.profile ? <Spinner /> : <Fragment>\n        <h1 className=\"large text-primary\">\n            Dashboard\n        </h1>\n        <p className=\"lead\">\n            {/* && operator here -> if props.auth.user is present, only then show the username */}\n            <i className=\"fas fas-user\"></i> Welcome { props.auth.user && props.auth.user.user.name }\n        </p>\n        { props.profile.profile !== null ? <Fragment>\n            <DashboardActions />\n            <Experience  experience={props.profile.profile.experience} />\n            <Education  education={props.profile.profile.education} />\n\n            <div className=\"my-2\">\n                <button onClick={() => props.deleteAccount()} className=\"btn btn-danger\">Delete Account</button>\n            </div>\n\n        </Fragment> : <Fragment>\n            <p>You have not set a profile, please add some info!</p>\n            <Link to='/create-profile' className=\"btn btn-primary my-1\">Create Profile</Link>\n        </Fragment> }\n\n    </Fragment>\n}\n\nDashboard.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    profile: PropTypes.object.isRequired,\n    deleteAccount: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    profile: state.profile\n})\n\nexport default connect(mapStateToProps, {\n    getCurrentProfile,\n    deleteAccount\n})(Dashboard);\n","/home/raj/Desktop/ConnectApp/client/src/components/routing/PrivateRoute.js",[],"/home/raj/Desktop/ConnectApp/client/src/reducers/profile.js",["174"],"\nimport { GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, UPDATE_PROFILE, GET_PROFILES, GET_REPOS } from '../actions/types';\n\nconst initialState = {\n    profile: null, // current profile for the user + any profile the user vists\n    profiles: [], // we will be listing profiles for all users, this will go here\n    repos: [], // git repos\n    loading: true,\n    error: {} // errors are added here\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type){\n        case GET_PROFILE:\n            return {...state, profile: action.payload, loading: false};\n        case PROFILE_ERROR:\n            return {...state, profile: null, error: action.payload, loading: false};\n        case CLEAR_PROFILE: \n            return {...state, profile: null, repos: [], loading: false};\n        case UPDATE_PROFILE:\n            return {...state, profile: action.payload, loading: false};\n        case GET_PROFILES:\n            return {...state, profiles: action.payload, loading: false};\n        case GET_REPOS:\n            return {...state, repos: action.payload, loading: false};\n        default:\n            return state;\n    }\n}","/home/raj/Desktop/ConnectApp/client/src/actions/profile.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/layout/Spinner.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile-form/CreateProfile.js",["175"],"import React, { useState, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createProfile } from '../../actions/profile';\n\nconst CreateProfile = (props) => {\n\n\n    const [formData, setFormData] = useState({\n\n        company: '',\n        website: '',\n        location: '',\n        status: '',\n        skills: '',\n        githubusername: '',\n        bio: '',\n        twitter: '',\n        facebook: '',\n        linkedin: '',\n        youtube: '',\n        instagram: ''\n\n    });\n\n    const [displaySocialInputs, toggleSocialInputs] = useState(false);\n\n    const {\n\n        company,\n        website,\n        location,\n        status,\n        skills,\n        githubusername,\n        bio,\n        twitter,\n        facebook,\n        linkedin,\n        youtube,\n        instagram\n\n    } = formData;\n\n\n    const onChange = (e) => {\n        setFormData({\n            ...formData, [e.target.name]: e.target.value\n        })\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        props.createProfile(formData, props.history);\n    }\n\n\n    return (\n        <Fragment>\n            <h1 className=\"large text-primary\">\n                Create Your Profile\n            </h1>\n            <p className=\"lead\">\n                <i className=\"fas fa-user\"></i> Let's get some information to make your\n                profile stand out\n            </p>\n            <small>* = required field</small>\n            <form className=\"form\" onSubmit={(e)=> onSubmit(e)}>\n                <div className=\"form-group\">\n                <select name=\"status\" value={status} onChange={(e) => onChange(e)}>\n                    <option value=\"0\">* Select Professional Status</option>\n                    <option value=\"Developer\">Developer</option>\n                    <option value=\"Junior Developer\">Junior Developer</option>\n                    <option value=\"Senior Developer\">Senior Developer</option>\n                    <option value=\"Manager\">Manager</option>\n                    <option value=\"Student or Learning\">Student or Learning</option>\n                    <option value=\"Instructor\">Instructor or Teacher</option>\n                    <option value=\"Intern\">Intern</option>\n                    <option value=\"Other\">Other</option>\n                </select>\n                <small className=\"form-text\"\n                    >Give us an idea of where you are at in your career</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Company\" name=\"company\" value={company} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Could be your own company or one you work for</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Website\" name=\"website\" value={website} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Could be your own or a company website</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Location\" name=\"location\" value={location} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >City & state suggested (eg. Boston, MA)</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"* Skills\" name=\"skills\" value={skills} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Please use comma separated values (eg.\n                    HTML,CSS,JavaScript,PHP)</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Github Username\"\n                    name=\"githubusername\"\n                    value={githubusername} onChange={(e) => onChange(e)}\n                />\n                <small className=\"form-text\"\n                    >If you want your latest repos and a Github link, include your\n                    username</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <textarea placeholder=\"A short bio of yourself\" name=\"bio\" value={bio} onChange={(e) => onChange(e)}></textarea>\n                <small className=\"form-text\">Tell us a little about yourself</small>\n                </div>\n\n                <div className=\"my-2\">\n                <button onClick={(e) => toggleSocialInputs(!displaySocialInputs)} type=\"button\" className=\"btn btn-light\">\n                    Add Social Network Links\n                </button>\n                <span>Optional</span>\n                </div>\n\n\n                {/* if toggle is true, show all social inputs else hide them */}\n                {displaySocialInputs && <Fragment>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-twitter fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" value={twitter} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-facebook fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" value={facebook} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-youtube fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" value={youtube} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-linkedin fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" value={linkedin} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-instagram fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" value={instagram} onChange={(e) => onChange(e)} />\n                    </div>\n\n                </Fragment>}\n\n                \n                <input type=\"submit\" className=\"btn btn-primary my-1\" />\n                <Link to=\"/dashboard\" className=\"btn btn-light my-1\">Go Back</Link>\n            </form>\n        </Fragment>\n    )\n}\n\nCreateProfile.propTypes = {\n    createProfile: PropTypes.func.isRequired,\n}\n\n{/* for using history, we wrap the component with withRouter */}\nexport default connect(null, { createProfile })(withRouter(CreateProfile));","/home/raj/Desktop/ConnectApp/client/src/components/dashboard/DashboardActions.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile-form/EditProfile.js",["176"],"import React, { useState, Fragment, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createProfile, getCurrentProfile } from '../../actions/profile';\n\nconst EditProfile = ({ \n    profile: { profile, loading },\n    createProfile,\n    getCurrentProfile,\n    history\n }) => {\n\n\n    const [formData, setFormData] = useState({\n\n        company: '',\n        website: '',\n        location: '',\n        status: '',\n        skills: '',\n        githubusername: '',\n        bio: '',\n        twitter: '',\n        facebook: '',\n        linkedin: '',\n        youtube: '',\n        instagram: ''\n\n    });\n\n    const [displaySocialInputs, toggleSocialInputs] = useState(false);\n\n    useEffect(() => {\n        getCurrentProfile();\n\n        setFormData({\n            company: loading || !profile.company ? '' :  profile.company,\n            website: loading || !profile.website ? '' :  profile.website,\n            location: loading || !profile.location ? '' :  profile.location,\n            status: loading || !profile.status ? '' :  profile.status,\n            skills: loading || !profile.skills ? '' :  profile.skills.join(','),\n            githubusername: loading || !profile.githubusername ? '' :  profile.githubusername,\n            bio: loading || !profile.bio ? '' :  profile.bio,\n            twitter: loading || !profile.social ? '' :  profile.social.twitter,\n            facebook: loading || !profile.social ? '' :  profile.social.facebook,\n            linkedin: loading || !profile.social ? '' :  profile.social.linkedin,\n            youtube: loading || !profile.social ? '' :  profile.social.youtube,\n            instagram: loading || !profile.social ? '' :  profile.social.instagram,\n        })\n\n    },[loading]);\n\n    const {\n\n        company,\n        website,\n        location,\n        status,\n        skills,\n        githubusername,\n        bio,\n        twitter,\n        facebook,\n        linkedin,\n        youtube,\n        instagram\n\n    } = formData;\n\n\n    const onChange = (e) => {\n        setFormData({\n            ...formData, [e.target.name]: e.target.value\n        })\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        createProfile(formData, history, true);\n    }\n\n\n    return (\n        <Fragment>\n            <h1 className=\"large text-primary\">\n                Edit Your Profile\n            </h1>\n            <p className=\"lead\">\n                <i className=\"fas fa-user\"></i> Let's get some information to make your\n                profile stand out\n            </p>\n            <small>* = required field</small>\n            <form className=\"form\" onSubmit={(e)=> onSubmit(e)}>\n                <div className=\"form-group\">\n                <select name=\"status\" value={status} onChange={(e) => onChange(e)}>\n                    <option value=\"0\">* Select Professional Status</option>\n                    <option value=\"Developer\">Developer</option>\n                    <option value=\"Junior Developer\">Junior Developer</option>\n                    <option value=\"Senior Developer\">Senior Developer</option>\n                    <option value=\"Manager\">Manager</option>\n                    <option value=\"Student or Learning\">Student or Learning</option>\n                    <option value=\"Instructor\">Instructor or Teacher</option>\n                    <option value=\"Intern\">Intern</option>\n                    <option value=\"Other\">Other</option>\n                </select>\n                <small className=\"form-text\"\n                    >Give us an idea of where you are at in your career</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Company\" name=\"company\" value={company} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Could be your own company or one you work for</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Website\" name=\"website\" value={website} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Could be your own or a company website</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"Location\" name=\"location\" value={location} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >City & state suggested (eg. Boston, MA)</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input type=\"text\" placeholder=\"* Skills\" name=\"skills\" value={skills} onChange={(e) => onChange(e)} />\n                <small className=\"form-text\"\n                    >Please use comma separated values (eg.\n                    HTML,CSS,JavaScript,PHP)</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Github Username\"\n                    name=\"githubusername\"\n                    value={githubusername} onChange={(e) => onChange(e)}\n                />\n                <small className=\"form-text\"\n                    >If you want your latest repos and a Github link, include your\n                    username</small\n                >\n                </div>\n                <div className=\"form-group\">\n                <textarea placeholder=\"A short bio of yourself\" name=\"bio\" value={bio} onChange={(e) => onChange(e)}></textarea>\n                <small className=\"form-text\">Tell us a little about yourself</small>\n                </div>\n\n                <div className=\"my-2\">\n                <button onClick={(e) => toggleSocialInputs(!displaySocialInputs)} type=\"button\" className=\"btn btn-light\">\n                    Add Social Network Links\n                </button>\n                <span>Optional</span>\n                </div>\n\n\n                {/* if toggle is true, show all social inputs else hide them */}\n                {displaySocialInputs && <Fragment>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-twitter fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" value={twitter} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-facebook fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" value={facebook} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-youtube fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" value={youtube} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-linkedin fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" value={linkedin} onChange={(e) => onChange(e)} />\n                    </div>\n\n                    <div className=\"form-group social-input\">\n                    <i className=\"fab fa-instagram fa-2x\"></i>\n                    <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" value={instagram} onChange={(e) => onChange(e)} />\n                    </div>\n\n                </Fragment>}\n\n                \n                <input type=\"submit\" className=\"btn btn-primary my-1\" />\n                <Link to=\"/dashboard\" className=\"btn btn-light my-1\">Go Back</Link>\n            </form>\n        </Fragment>\n    )\n}\n\nEditProfile.propTypes = {\n    createProfile: PropTypes.func.isRequired,\n    getCurrentProfile: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profile\n})\n\nexport default connect(mapStateToProps, { createProfile, getCurrentProfile })(withRouter(EditProfile));","/home/raj/Desktop/ConnectApp/client/src/components/profile-form/AddExperience.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile-form/AddEducation.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Experience.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/dashboard/Education.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profiles/Profiles.js",["177"],"import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Spinner from '../layout/Spinner';\n\nimport ProfileItem from './ProfileItem';\n\nimport { getAllProfiles  } from '../../actions/profile';\n\nconst Profiles = ({ getAllProfiles, profile: { profiles, loading } }) => {\n\n\n    useEffect(() => {\n        getAllProfiles();\n    },[])\n\n\n    return (\n        <Fragment>\n            { loading ? <Spinner /> : <Fragment>\n                <h1 className=\"large text-primary\">Developers</h1>\n                <p className=\"lead\">\n                    <i className=\"fab fa-connectdevelop\"></i> Connect with developers\n                </p>\n                <div className=\"profiles\">\n                    { profiles.length > 0 ? (\n\n                        profiles.map((profile) => ( <ProfileItem key={profile._id} profile={profile} /> ))\n\n                    ) : <h4>No profiles found!</h4> }\n                </div>\n\n            </Fragment>}\n        </Fragment>\n    )\n}\n\nProfiles.propTypes = {\n    getAllProfiles: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profile\n})\n\nexport default connect(mapStateToProps, { getAllProfiles })(Profiles);\n","/home/raj/Desktop/ConnectApp/client/src/components/profiles/ProfileItem.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile/Profile.js",["178"],"import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport ProfileTop from './ProfileTop';\nimport ProfileAbout from './ProfileAbout';\n\nimport ProfileExperience from './ProfileExperience';\nimport ProfileEducation from './ProfileEducation';\nimport ProfileGitHub from './ProfileGitHub';\n\nimport Spinner from '../layout/Spinner';\n\nimport { getProfileById } from '../../actions/profile';\n\n\nconst Profile = ({ getProfileById, match, profile: { profile, loading }, auth }) => {\n\n    useEffect(() => {\n\n        getProfileById(match.params.id);\n\n    },[]);\n\n    return (\n        <Fragment>\n            {profile === null || loading ? <Spinner /> : <Fragment>\n                \n                <Link to=\"/profiles\" className=\"btn\">Back to Profiles</Link>\n\n                {/* if the user is logged in and he/she views his own profile, show an edit button */}\n                {auth.isAuthenticated && auth.loading === false && auth.user.user._id === profile.user._id && \n\n                (<Link to='/edit-profile' className=\"btn btn-dark\">Edit Profile</Link>)}\n\n                <div className=\"profile-grid my-1\">\n                    <ProfileTop profile={profile} />\n                    <ProfileAbout profile={profile} />\n\n                    <div className=\"profile-exp bg-white p-2\">\n                        <h2 className=\"text-primary\">Experience</h2>\n                        {profile.experience.length > 0 ? (<Fragment>\n\n                            {profile.experience.map((exp) => (\n                                <ProfileExperience key={exp._id} experience={exp} />\n                            ))}\n\n                        </Fragment>) : (<h4>No experience credentials</h4>)}\n\n                    </div>\n\n\n                    <div className=\"profile-edu bg-white p-2\">\n                        <h2 className=\"text-primary\">Education</h2>\n                        {profile.education.length > 0 ? (<Fragment>\n\n                            {profile.education.map((edu) => (\n                                <ProfileEducation key={edu._id} education={edu} />\n                            ))}\n\n                        </Fragment>) : (<h4>No education credentials</h4>)}\n\n                    </div>\n\n                    {profile.githubusername && (<ProfileGitHub username={profile.githubusername} />)}\n\n                </div>\n                \n            </Fragment>}\n        </Fragment>\n    )\n}\n\nProfile.propTypes = {\n    getProfileById: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profile,\n    // we need auth state here since if the user visits his profile, we will render an edit profile button\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps, { getProfileById })(Profile);\n","/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileTop.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileAbout.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileExperience.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileEducation.js",[],"/home/raj/Desktop/ConnectApp/client/src/components/profile/ProfileGitHub.js",["179"],"import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos  } from '../../actions/profile';\n\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGitHub = ({ username, getGithubRepos, repos }) => {\n\n\n    useEffect(() => {\n        \n        getGithubRepos(username);\n\n    },[]);\n\n    return (\n        <div className=\"profile-github\">\n           <h2 className=\"text-primary my-1\">GitHub Repos</h2>\n           {repos === null ? <Spinner /> : (\n\n               repos.map((repo) => (\n                <div key={repo._id} className=\"repo bg-white p-1 my-1\">\n                    <div>\n                        <h4>\n                            <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {repo.name}\n                            </a>\n                        </h4>\n                        <p>{repo.description}</p>\n                    </div>\n                    <div>\n                        <ul>\n                            <li className=\"badge badge-primary\">\n                                Stars: {repo.stargazers_count}\n                            </li>\n                            <li className=\"badge badge-dark\">\n                                Stars: {repo.watchers_count}\n                            </li>\n                            <li className=\"badge badge-light\">\n                                Stars: {repo.forks_count}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n               ))\n\n           )}\n        </div>\n    )\n}\n\nProfileGitHub.propTypes = {\n    username: PropTypes.string.isRequired,\n    getGithubRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    repos: state.profile.repos\n})\n \nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGitHub);\n","/home/raj/Desktop/ConnectApp/client/src/reducers/post.js",["180"],"/home/raj/Desktop/ConnectApp/client/src/components/posts/Posts.js",["181"],"/home/raj/Desktop/ConnectApp/client/src/actions/post.js",["182"],"/home/raj/Desktop/ConnectApp/client/src/components/posts/PostItem.js",["183"],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":38,"column":7,"nodeType":"190","endLine":38,"endColumn":9,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":5,"column":1,"nodeType":"194","endLine":14,"endColumn":2},{"ruleId":"192","severity":1,"message":"193","line":10,"column":1,"nodeType":"194","endLine":38,"endColumn":2},{"ruleId":"188","severity":1,"message":"189","line":18,"column":7,"nodeType":"190","endLine":18,"endColumn":9,"suggestions":"195"},{"ruleId":"192","severity":1,"message":"193","line":12,"column":1,"nodeType":"194","endLine":29,"endColumn":2},{"ruleId":"196","severity":1,"message":"197","line":178,"column":1,"nodeType":"198","messageId":"199","endLine":178,"endColumn":65},{"ruleId":"188","severity":1,"message":"200","line":52,"column":7,"nodeType":"190","endLine":52,"endColumn":16,"suggestions":"201"},{"ruleId":"188","severity":1,"message":"202","line":16,"column":7,"nodeType":"190","endLine":16,"endColumn":9,"suggestions":"203"},{"ruleId":"188","severity":1,"message":"204","line":24,"column":7,"nodeType":"190","endLine":24,"endColumn":9,"suggestions":"205"},{"ruleId":"188","severity":1,"message":"206","line":15,"column":7,"nodeType":"190","endLine":15,"endColumn":9,"suggestions":"207"},{"ruleId":"192","severity":1,"message":"193","line":11,"column":1,"nodeType":"194","endLine":20,"endColumn":2},{"ruleId":"188","severity":1,"message":"208","line":13,"column":7,"nodeType":"190","endLine":13,"endColumn":9,"suggestions":"209"},{"ruleId":"210","severity":1,"message":"211","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":18},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["217"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["218"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has missing dependencies: 'getCurrentProfile', 'profile.bio', 'profile.company', 'profile.githubusername', 'profile.location', 'profile.skills', 'profile.social', 'profile.status', and 'profile.website'. Either include them or remove the dependency array. If 'getCurrentProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["219"],"React Hook useEffect has a missing dependency: 'getAllProfiles'. Either include it or remove the dependency array. If 'getAllProfiles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["220"],"React Hook useEffect has missing dependencies: 'getProfileById' and 'match.params.id'. Either include them or remove the dependency array. If 'getProfileById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["221"],"React Hook useEffect has missing dependencies: 'getGithubRepos' and 'username'. Either include them or remove the dependency array. If 'getGithubRepos' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["222"],"React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array. If 'getPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["223"],"no-unused-vars","'setAlert' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"224","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [props]",{"range":"237","text":"238"},{"range":"239","text":"238"},"Update the dependencies array to be: [getCurrentProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]",{"range":"240","text":"241"},"Update the dependencies array to be: [getAllProfiles]",{"range":"242","text":"243"},"Update the dependencies array to be: [getProfileById, match.params.id]",{"range":"244","text":"245"},"Update the dependencies array to be: [getGithubRepos, username]",{"range":"246","text":"247"},"Update the dependencies array to be: [getPosts]",{"range":"248","text":"249"},[1217,1219],"[props]",[507,509],[1810,1819],"[getCurrentProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]",[401,403],"[getAllProfiles]",[660,662],"[getProfileById, match.params.id]",[356,358],"[getGithubRepos, username]",[361,363],"[getPosts]"]